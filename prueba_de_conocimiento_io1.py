# -*- coding: utf-8 -*-
"""Prueba de conocimiento IO1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/161JiTgAzGW2xV86s4tQ0-jTg48otOoM-

# Importar la librería
"""

import cvxpy as cvx
import numpy as np

"""# Solver "ECOS"

"""

# Definición de las variables de decisión
x1 = cvx.Variable()
x2 = cvx.Variable()


# Definición de la función objetivo
Z = cvx.Minimize(3*x1 + 8*x2 )

# Definición de restricciones (sujeto a)
r = [
    1*x1 + 1*x2 >= 50,
    1*x1 - 1*x2 <= 20,
    1*x1 >= 0,
    1*x2 >= 0,
]

# Configurar el problema en cvxpy
P = cvx.Problem(Z,r)

# Solucionar el problema
P.solve(solver=cvx.ECOS)

# impresiones
print("Estado de la solución = ", P.status)
print("Z óptimo = ", round(P.value,0))
print("X = ", np.round(x1.value,0))
print("Y = ", np.round(x2.value,0))

"""# Solver "CVXOPT"

"""

# Definición de las variables de decisión
x1 = cvx.Variable()
x2 = cvx.Variable()


# Definición de la función objetivo
Z = cvx.Minimize(3*x1 + 8*x2 )

# Definición de restricciones (sujeto a)
r = [
    1*x1 + 1*x2 >= 50,
    1*x1 - 1*x2 <= 20,
    1*x1 >= 0,
    1*x2 >= 0,
]

# Configurar el problema en cvxpy
P = cvx.Problem(Z,r)

# Solucionar el problema
P.solve(solver=cvx.CVXOPT)

# impresiones
print("Estado de la solución = ", P.status)
print("Z óptimo = ", round(P.value,0))
print("X = ", np.round(x1.value,0))
print("Y = ", np.round(x2.value,0))

"""# Comparacion de las respuestas

Las respuestas son iguales en los dos solvers x=35 y y=15, la utilizacion de diferentes tipos de solvers nos ayuda mas que todo cuando con el solver predeterminado de la libreria CVXPY preguntamos por el estado de su solucion y nos arroja la sentencia "OPTIMAL_INACCURATE", la mejor opcion sera probar con cada tipo de solver debido a que cada uno utiliza diferentes tipos de algoritmos hasta encontrar que el estado de la solucion sea "OPTIMAL".

# Otros solvers

Con este comando podemos ver todos los solvers que vienen instalados por defecto en la libreria de CVXPY.
"""

cvx.installed_solvers()